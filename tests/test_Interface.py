import pytest
import re

from src.VM.interface import Interface
from src.VM.vm import VM

# Test Initialization of Interface
@pytest.fixture
def mock_interface():
    return Interface()

@pytest.fixture
def mock_neighbor_interface():
    return Interface()

def test_init_with_autogenerated_mac_address():
    autogen_mac_interface = Interface()
    pattern = r'^([0-9A-Fa-f]{2}-){5}[0-9A-Fa-f]{2}$'

    assert autogen_mac_interface.mac != "" and bool(re.match(pattern, autogen_mac_interface.mac))

def test_init_with_preset_mac_address():
    preset_mac_interface = Interface("11-11-11-11-11-11")
    assert preset_mac_interface.mac == "11-11-11-11-11-11"

# Test binding to VM
@pytest.fixture
def vm_instance():
    return VM()

def test_bind_to_vm(vm_instance, mock_interface):
    mock_interface.bind_to_vm(vm_instance)
    assert mock_interface.vm is vm_instance

#Test binding IP address to interface
def test_set_ip(mock_interface):
    ip = "192.168.0.2"
    mock_interface.set_ip(ip)
    assert mock_interface.ip is "192.168.0.2"

#Test connection to a neighbor
def test_connect_to_neighbor(mock_interface, mock_neighbor_interface):
    mock_interface.connect_to_neighbor(mock_neighbor_interface)
    assert mock_interface.neighbor is mock_neighbor_interface

#Test message sending
def test_send(mock_interface, mock_neighbor_interface, vm_instance):
    mock_neighbor_interface.bind_to_vm(vm_instance)
    mock_interface.connect_to_neighbor(mock_neighbor_interface)

    mock_interface.send("test")
    assert mock_neighbor_interface.vm.memory_buffer is "test"

#Test message receival
def test_receive(mock_interface, vm_instance):
    mock_interface.bind_to_vm(vm_instance)

    mock_interface.receive("receive")
    assert mock_interface.vm.memory_buffer is "receive"
